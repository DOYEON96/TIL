{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"회귀-보스턴집값.ipynb","private_outputs":true,"provenance":[],"authorship_tag":"ABX9TyNcWg1XiAvjolKLKPCXJhQq"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"7X3aZAjI3MX7"},"source":["# boston House Price\n","\n","## EDA\n","[step 1] 데이터 준비\n"]},{"cell_type":"code","metadata":{"id":"8D5mUFiK3V8j"},"source":["import numpy as np\n","import matplotlib.pyplot as plt\n","import scipy.stats\n","from sklearn.datasets import load_boston\n","import seaborn as sns\n","import pandas as pd\n","\n","# Boston 데이터셋 로드\n","boston = load_boston()\n","\n","# boston 데이터셋 DataFrame 변환\n","bostonDF = pd.DataFrame(boston.data, columns = boston.feature_names)\n","\n","# boston dataset의 target array는 주택 가격임. 이를 PRICE 칼럼으로 DataFrame에 추가함.\n","bostonDF['PRICE'] = boston.target\n","print('Boston 데이터셋 크기 : ', bostonDF.shape)\n","bostonDF.head()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Pcr7Z4873kui"},"source":["# (image)[/content/다운로드.png]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"UUHw4s695qNp"},"source":["bostonDF.info()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"3ZQ-v1qG6C5c"},"source":["bostonDF.describe()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"olMrAicv7dp6"},"source":[""]},{"cell_type":"code","metadata":{"id":"riC8E0Zb6C3D"},"source":["bostonDF = bostonDF[['CRIM', 'ZN', 'INDUS','CHAS', 'RM', 'AGE','DIS', 'RAD', 'TAX', 'PTRATIO', 'B',\t'LSTAT', 'PRICE']]\n","bostonDF.head()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"RC5bZDs76C0C"},"source":["bostonDF.plot(kind='scatter', x='LSTAT', y='PRICE', c='coral', s=10, figsize=(10, 5))\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"X7F5jm2F6CxX"},"source":["# seaborn으로 산점도 그리기\n","fig = plt.figure(figsize=(10, 5))\n","ax1 = fig.add_subplot(1, 2, 1)\n","ax2 = fig.add_subplot(1, 2, 2)\n","sns.regplot(x='LSTAT', y='PRICE', data=bostonDF, ax=ax1) # 회귀선 표시\n","sns.regplot(x='LSTAT', y='PRICE', data=bostonDF, ax=ax2, fit_reg=False) # 회귀선 미표시\n","\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"mH6_m65R8_0V"},"source":["# seaborn 조인트 그래프 - 산점도, 히스토그램\n","sns.jointplot(x='LSTAT', y='PRICE', data=bostonDF) # 회귀선 없음\n","sns.jointplot(x='LSTAT', y='PRICE', data=bostonDF, kind='reg') # 회귀선 표시\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZYTsOZYZ8_x6"},"source":["# seaborn pairplot으로 두 변수 간의 모든 경우의 수 그리기\n","sns.pairplot(bostonDF)\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"22W8e7A2AEme"},"source":["## 문제\n","1. 단순 회귀 분석을 수행하세요.\n","특성은 원하는 것 하나 선택 하세요.\n","\n","2. 다항회귀 분석을 수행하세요 (degree=2)\n","특성은 위에서 선택한 특성 사용\n","\n","3. 다중 회귀 분석을 수행하세요.\n","특성은 ['RM', 'ZN', 'INDUS', 'NOX', 'AGE', 'PTRATIO', 'LSTAT', 'RAD']를 사용하세요."]},{"cell_type":"markdown","metadata":{"id":"eNm5kOlPFEek"},"source":["1번"]},{"cell_type":"code","metadata":{"id":"c1J4uuzT8_vx"},"source":["df = bostonDF[['CRIM', 'RM', 'ZN', 'INDUS', 'NOX', 'AGE', 'PTRATIO', 'LSTAT', 'RAD', 'TAX']]\n","df1 = bostonDF[['RM', 'ZN', 'INDUS', 'NOX', 'AGE', 'PTRATIO', 'LSTAT', 'RAD']]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"D3-OpAPVGNqX"},"source":["# Matplotlib으로 산점도 그리기\n","df.plot(kind='scatter', x='TAX', y='CRIM', c = 'coral', s=10, figsize=(10, 5))\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"38GDNsh8E_Wc"},"source":["# Seaborn으로 산점도 그리기\n","fig = plt.figure(figsize=(10, 5))\n","ax1 = fig.add_subplot(1, 2, 1)\n","sns.regplot(x='TAX', y = 'CRIM', data=df, ax=ax1) # 회귀선 표시\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"G9M4kpaFGeRK"},"source":["# seaborn pairplot으로 두 변수간의 모든 경우의 수 그리기\n","sns.pairplot(df)\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"cxMXT5s0HCb1"},"source":["2번"]},{"cell_type":"code","metadata":{"id":"u4FvwrWgHMvT"},"source":["# 속성(변수) 선택\n","X = df[['TAX']] # 독립변수 X\n","Y = df['CRIM'] # 종속변수 Y\n","\n","# train data와 test data로 구분(7:3 비율)\n","from sklearn.model_selection import train_test_split # 사이킷런 라이브러리\n","X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, random_state=10) # X : 독립변수 Y : 종속변수\n","                                                                                          # test_size : 검증(test_data) 비율 : 30% random_state : 랜덤 추출 값\n","print('train data 개수 : ', X_train.shape)\n","print('test data 개수 : ', X_test.shape)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"W-wRQAZWHMtX"},"source":["# sklearn 라이브러리에서 필요한 모듈 가져오기\n","from sklearn.linear_model import LinearRegression # 선형 회귀분석\n","from sklearn.preprocessing import PolynomialFeatures # 다항식 변환\n","\n","# 다항식 변환\n","poly = PolynomialFeatures(degree=2)\n","X_train_poly = poly.fit_transform(X_train)\n","print('원 데이터 : ', X_train.shape)\n","print('2차항 변환 데이터 : ', X_train_poly.shape)\n","print('원 데이터 : ', X_train)\n","print('2차항 변환 데이터 : ', X_train_poly)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Hi009yhQHMrM"},"source":["# train data를 가지고 모형 학습\n","pr = LinearRegression()\n","pr.fit(X_train_poly, Y_train)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"UVHD5jPFHMpB"},"source":["X_test_poly = poly.fit_transform(X_test) # X_train 데이터를 2차항으로 변형\n","\n","# 학습을 마친 모형에 test data를 적용하여 결정계수(R-제곱) 계산\n","r_square = pr.score(X_test_poly, Y_test)\n","r_square"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"svOWApdEHMlE"},"source":["# train data의 산점도와 test data로 예측한 회귀선을 그래프로 출력\n","y_hat = pr.predict(X_test_poly)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"KNSdc-vpQ4Fb"},"source":["df_y = pd.DataFrame({'y_hat':y_hat, 'y':Y_test})\n","df_y"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"mgUiUJN4Q4Dl"},"source":["df_y_test = pd.DataFrame({'y_hat':y_hat, 'y':Y_test})\n","df_y_test['차이']=df_y_test['y_hat']-df_y['y']\n","df_y_test"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"a7FDBiGlQ4BP"},"source":["fig = plt.figure(figsize=(10,5))\n","ax = fig.add_subplot(1, 1, 1)\n","ax.plot(X_train, Y_train, 'o', label = 'Train Data') # 데이터 분포\n","ax.plot(X_test, y_hat, 'r+', label = 'Predicted Value') # 모형이 학습한 회귀선\n","ax.legend(loc='best')\n","plt.xlabel('차중')\n","plt.ylabel('연비(mpg)')\n","plt.show()\n","plt.close()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"yajEhNveQ3-8"},"source":["# 모형에 전체 X 데이터를 입력하여 예측한 값 y_hat을 실제 값 y와 비교\n","X_poly = poly.fit_transform(X)\n","y_hat = pr.predict(X_poly)\n","\n","plt.figure(figsize=(10, 5))\n","ax1 = sns.kdeplot(Y, label='y')\n","ax2 = sns.kdeplot(y_hat, label='y_that', ax = ax1)\n","plt.legend()\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"O1HxCFZpSfqc"},"source":["3번문제"]},{"cell_type":"code","metadata":{"id":"YOyll7FYR3a2"},"source":["# 속성(변수) 선택\n","X = bostonDF['RM', 'ZN', 'INDUS', 'NOX', 'AGE', 'PTRATIO', 'LSTAT', 'RAD'] # 독립변수 X\n","Y = bostonDF['TAX'] # 종속변수 Y\n","\n","# train data와 test data로 구분(7:3 비율)\n","from sklearn.model_selection import train_test_split # 사이킷런 라이브러리\n","X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, random_state=10) # X : 독립변수 Y : 종속변수\n","                                                                                          # test_size : 검증(test_data) 비율 : 30% random_state : 랜덤 추출 값\n","print('train data 개수 : ', X_train.shape)\n","print('test data 개수 : ', X_test.shape)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"DUzu-fCUQ38h"},"source":["# sklearn 라이브러리에서 선형회귀분석 모듈 가져오기\n","from sklearn.linear_model import LinearRegression\n","\n","# 회귀분석 모형 객체 생성\n","lr = LinearRegression()\n","\n","# train data를 가지고 모형 학습\n","lr.fit(X_train, Y_train)\n","\n","# 학습을 마친 모형에 test data를 적용하여 결정계수 계산\n","r_square = lr.score(X_test, Y_test)\n","r_square"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"twWG3anaS06P"},"source":["# 모형에 전체 X_test 데이터를 입력하여 예측한 값 y_hat을 실제 값 y와 비교\n","y_hat = lr.predict(X_test)\n","y_hat"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"NGt4XtMbS033"},"source":["df_y = pd.DataFrame({'y_hat':y_hat, 'y':Y_test})\n","df_y"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"r3I7_EBJS0y6"},"source":["# train data 산점도와 test data로 예측한 회귀선을 그래프로 출력\n","y_hat = lr.predict(X_test)\n","\n","plt.figure(figsize=(10,5))\n","ax1 = sns.kdeplot(Y_test, label='y_test')\n","ax2 = sns.kdeplot(y_hat, label='y_hat', ax = ax1)\n","plt.legend()\n","plt.show()\n"],"execution_count":null,"outputs":[]}]}