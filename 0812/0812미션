{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"0812미션","private_outputs":true,"provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyOtmQb6mGrVXFxQA/h+xwZV"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"R79iq6To-9n2"},"source":["### 오늘 사용한 데이터셋이 '타이타닉', '암세포'\n","- [미션 1] KNN 모델 - 암세포 데이터셋을 이용하여 구현.\n","- [미션 2] SVM 모델 - 암세포 데이터셋을 이용하여 구현.\n","- [미션 3] 의사결정 나무 모델 - 타이타닉으로 구현."]},{"cell_type":"markdown","metadata":{"id":"V1t6zU3u_Ong"},"source":["1번"]},{"cell_type":"code","metadata":{"id":"C58kcFXg-8jK"},"source":["import pandas as pd\n","import seaborn as sns\n","import numpy as np\n","\n","uci_path = 'https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/breast-cancer-wisconsin.data'\n","df = pd.read_csv(uci_path, header=None)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"lRvnM2xSACZ7"},"source":["# 열 이름 지정\n","df.columns = ['id', 'clump', 'cell_size', 'cell_shape', 'adhesion', 'epithlial', 'bare_nuclei', 'chromatin', 'normal_nucleoli', 'mitoses', 'class']"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"cIuLpqJ7J1vy"},"source":["df = df[list(df.columns)[1:]]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Y3tkywqF_fkZ"},"source":["df['bare_nuclei'].unique()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ngN_BdB-AJCJ"},"source":["df['bare_nuclei'].replace('?', np.nan, inplace=True)\n","df.dropna(subset=['bare_nuclei'], axis=0, inplace=True)\n","df = df.astype({'bare_nuclei':int})\n","df.info()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"BOu22gdCASR5"},"source":["# 속성(변수) 선택\n","X = df[['cell_size']] # 독립변수 X\n","y = df['normal_nucleoli']"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"jJcbx36TDik8"},"source":["# 설명변수 데이터를 정규화(normalization)\n","from sklearn import preprocessing\n","X=preprocessing.StandardScaler().fit(X).transform(X)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"wcACFxerDiif"},"source":["# train data 와 test data로 구분(7 : 3비율)\n","from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=10)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"YjcAzbvcDif7"},"source":["print('train data 개수 : ', X_train.shape)\n","print('test data 개수: ', X_test.shape)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"keGBsG5LDidT"},"source":["# sklearn 라이브러리에서 KNN분류 모형 가져오기\n","from sklearn.neighbors import KNeighborsClassifier\n","\n","# 모형 객체 생성 (k=5로 설정)\n","knn = KNeighborsClassifier(n_neighbors=5)\n","\n","# train data를 가지고 모형 학습\n","knn.fit(X_train, y_train)\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"hGatUpWbD1HS"},"source":["# test data를 가지고 y_hat을 예측 (분류)\n","y_hat = knn.predict(X_test)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"bS-Xm94iD1FE"},"source":["import pandas as pd\n","df1 = pd.DataFrame({'y_hat':y_hat, 'y':y_test})\n","print(y_test)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"dDDjlb_WD1C7"},"source":["df1['차이'] = df1['y_hat'] == df1['y']\n","df1.head()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"uOuCEoEBD1Ad"},"source":["print('오답 수 : ', len(df1) - sum(df1['차이']))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"YjhGimvQEPl8"},"source":["# 모형 성능 평가 - Confusuion Matrix 계산\n","from sklearn import metrics\n","knn_matrix = metrics.confusion_matrix(y_test, y_hat)\n","knn_matrix"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"chkToO7xEPjW"},"source":["# 모형 성능 평가 - 평가지표 계산\n","knn_report = metrics.classification_report(y_test, y_hat)\n","print(knn_report)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"dDhu0xAaJf05"},"source":["2번"]},{"cell_type":"code","metadata":{"id":"9FEsTX8JLzQU"},"source":["# 속성(변수) 선택\n","X = df[['cell_size', 'cell_shape']] # 독립변수 X\n","y = df['mitoses']"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"cuI5MIx6LzOP"},"source":["# 설명 변수 데이터를 정규화\n","from sklearn import preprocessing\n","X = preprocessing.StandardScaler().fit(X).transform(X)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Ro9t0276LzMX"},"source":["# train data 와 test data로 구분(7 : 3비율)\n","from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=10)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"nUZENcJhLzJ8"},"source":["# sklearn 라이브러리에서 SVM 분류 모형 가져오기\n","from sklearn import svm\n","\n","# 모형 객체 생성 (기본값 kernel ='rbf' 적용)\n","svm_model = svm.SVC()\n","\n","# train data를 가지고 모형 학습\n","svm_model.fit(X_train, y_train)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"KUubdGp3LzHn"},"source":["# test data를 가지고 y_hat을 예측 (분류)\n","y_hat = svm_model.predict(X_test)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"x-Ei95b4NX95"},"source":["import pandas as pd\n","df2 = pd.DataFrame({'y_hat':y_hat,'y':y_test})\n","df2['차이'] = df2['y_hat'] == df2['y']\n","df2.head()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Y_PKT0dPNZV0"},"source":["print('오답 수:', len(df2) - sum(df2['차이']))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"uMv7aGWkNa-z"},"source":["# 모형 성능 평가 - Confusion Matrix 계산\n","from sklearn import metrics\n","svm_matrix = metrics.confusion_matrix(y_test, y_hat)\n","svm_matrix"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"hWKiWAGBNcj3"},"source":["# 모형 성능 평가 - 평가지표 계산\n","svm_report = metrics.classification_report(y_test, y_hat)\n","print(svm_report)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"2GuJmRhLOBbY"},"source":["3번"]},{"cell_type":"code","metadata":{"id":"run83NetNjK5"},"source":["# load_dataset 함수를 사용하여 데이터프레임으로 변환\n","df = sns.load_dataset('titanic')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Jd78w_LFN530"},"source":["df['alone'].unique()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"59mDKt9qOLIp"},"source":["# NAN 값이 많은 deck 열을 삭제, embarked와 내용이 겹치는 embark_town 열을 삭제\n","rdf = df.drop(['deck', 'embark_town'], axis=1)\n","rdf.columns.values"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"6FC3EBq_OPbe"},"source":["# age열에 나이 데이터가 없는 모든 행을 삭제 - age 열(891개 중 177개의 NaN 값)\n","rdf = rdf.dropna(subset=['age'], how='any', axis=0)\n","rdf.info()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"pbHUDH4tOQhc"},"source":["# embarked 열의 NaN값을 승선도시 중에서 가장 많이 출현한 값으로 치환하기\n","most_freq = rdf['embarked'].value_counts(dropna=True).idxmax()\n","most_freq"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"7zUGTxfDOUUy"},"source":["rdf['embarked'].fillna(most_freq, inplace = True)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"CcgUPb6SOVoH"},"source":["# 분석에 활용할 열(속성)을 선택\n","ndf = rdf[['survived', 'pclass', 'sex', 'age', 'sibsp', 'parch', 'embarked']]\n","ndf.head()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"beKaBJtfOe6D"},"source":["# 원핫인코딩 - 범주형 데이터를 모형이 인식할 수 있도록 숫자형으로 변환\n","onehot_sex = pd.get_dummies(ndf['sex'])\n","onehot_sex.head()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"vadGHzUOOiuz"},"source":["ndf = pd.concat([ndf, onehot_sex], axis=1)\n","ndf.head()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"s1DNJL3fOkIl"},"source":["onehot_embarked = pd.get_dummies(ndf['embarked'], prefix='town')\n","onehot_embarked.head()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"6UfTS2pyOmY_"},"source":["ndf = pd.concat([ndf, onehot_embarked], axis=1)\n","ndf.head()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"hkx0ZnuWOneZ"},"source":["ndf.drop(['sex', 'embarked'], axis=1, inplace=True)\n","ndf.head()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"sJ6JfwqkOpI4"},"source":["# 속성(변수) 선택\n","X = ndf[list(ndf.columns)[1:]] # 독립변수 X\n","y = ndf[list(ndf.columns)[0]]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"kuwiF-bVQYiA"},"source":["# 설명 변수 데이터를 정규화\n","X = preprocessing.StandardScaler().fit(X).transform(X)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"jMaYcmhZQioe"},"source":["# train data 와 test data로 구분(7:3)\n","X_train , X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=10)\n","print('train data 개수 : ', X_train.shape)\n","print('test data 개수 : ', X_test.shape)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"2dv0olMfQjpp"},"source":["from sklearn import tree\n","\n","# 모형 객체 생성 (criterion='entropy') 적용\n","tree_model = tree.DecisionTreeClassifier(criterion='entropy', max_depth=5)\n","\n","# train data를 가지고 모형 학습\n","tree_model.fit(X_train, y_train)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"9a_5iSbXQnEm"},"source":["# test data를 가지고 y_hat을 예측(분류)\n","y_hat = tree_model.predict(X_test)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"X_HcDYbyQp-3"},"source":["df3 = pd.DataFrame({'y_hat':y_hat, 'y':y_test})\n","df3['차이'] = df3['y_hat'] == df3['y']\n","df3.head()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"InYF_5OLQvbS"},"source":["print('오답 수 :', len(df3) - sum(df3['차이']))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"sJEvl72hQvZT"},"source":["# 모형 성능 평가 - Confusion Matrix 계산\n","tree_matrix = metrics.confusion_matrix(y_test, y_hat)\n","tree_matrix"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"NW60zsiyQvWY"},"source":["# 모형 성능 평가 - 평가 지표 계산\n","tree_report = metrics.classification_report(y_test, y_hat)\n","print(tree_report)"],"execution_count":null,"outputs":[]}]}