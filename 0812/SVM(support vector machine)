{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"SVM(support vector machine)","private_outputs":true,"provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyPG45WZ0UxkWC08TEQwFFFw"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"PNt492cdk1_t"},"source":["SVM(support vector machine)"]},{"cell_type":"markdown","metadata":{"id":"mNU3YC0pk3Tf"},"source":["[step1]\n","\n","데이터 로드"]},{"cell_type":"code","metadata":{"id":"-g7CTMZskdIZ"},"source":["import pandas as pd\n","import seaborn as sns\n","\n","df = sns.load_dataset('titanic')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"4h3OKsOvlK9-"},"source":["[step2]\n","\n","데이터 전처리"]},{"cell_type":"code","metadata":{"id":"ezuZcTNxki5L"},"source":["# NaN값이 많은 deck 열을 삭제, embarked와 내용이 겹치는 embark_town 열을 삭제\n","rdf = df.drop(['deck', 'embark_town'], axis=1)\n","\n","rdf = rdf.dropna(subset=['age'], how='any', axis=0)\n","\n","most_freq = rdf['embarked'].value_counts(dropna=True).idxmax()\n","rdf['embarked'].fillna(most_freq, inplace=True)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rxXrLjNKlDvT"},"source":["[step3]\n","\n"]},{"cell_type":"code","metadata":{"id":"KLXM4H38lHX8"},"source":["rdf.info()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"3Jp28w7ClJUL"},"source":["# 분석에 활용할 열 선택\n","ndf = rdf[['survived', 'pclass', 'sex', 'age', 'sibsp', 'parch', 'embarked']]\n","ndf.head()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"foSPRc-MlTDe"},"source":["# 원핫인코딩 - 범주형 데이터를 모형이 인식할 수 있도록 숫자형으로 변환\n","onehot_sex = pd.get_dummies(ndf['sex'])\n","ndf = pd.concat([ndf, onehot_sex], axis=1)\n","onehot_embarked = pd.get_dummies(ndf['embarked'], prefix='town')\n","ndf = pd.concat([ndf, onehot_embarked], axis=1)\n","ndf.drop(['sex', 'embarked'], axis=1, inplace=True)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"jU5kdjfYmLLZ"},"source":["ndf.head()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"3RVXX9CrpWMP"},"source":["[step 4] 데이터셋 구분 - 훈련용/검증용"]},{"cell_type":"code","metadata":{"id":"QLXH7PKbnb5G"},"source":["# 속성 선택\n","X = ndf[['pclass', 'age', 'sibsp', 'parch', 'female', 'male', 'town_C', 'town_Q', 'town_S']]\n","y = ndf['survived']\n","\n","# 설명 변수 데이터를 정규화\n","from sklearn import preprocessing\n","X = preprocessing.StandardScaler().fit(X).transform(X)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"7Vye0FTMnb2N"},"source":["# train data 와 test data로 구분(7 : 3)\n","from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=10)\n","\n","print('train data 개수 : ', X_train.shape)\n","print('test data 개수 : ', X_test.shape)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"tUKutOVhq22M"},"source":["[step 5]\n","\n","SVM 분류 모형 - sklearn 사용"]},{"cell_type":"code","metadata":{"id":"jcuBP6MJnbxA"},"source":["# sklearn 라이브러리에서 SVM 분류 모형 가져오기\n","from sklearn import svm\n","\n","# 모형 객체 생성 (기본값 kernel ='rbf' 적용)\n","svm_model = svm.SVC()\n","\n","# train data를 가지고 모형 학습\n","svm_model.fit(X_train, y_train)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"FBwGgnGpnbtS"},"source":["# test data를 가지고 y_hat을 예측 (분류)\n","y_hat = svm_model.predict(X_test)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"602wBS0Hrehc"},"source":["import pandas as pd\n","df = pd.DataFrame({'y_hat':y_hat,'y':y_test})\n","df['차이'] = df['y_hat'] == df['y']\n","df.head()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"lsRZ6vCvrvmJ"},"source":["print('오답 수:', len(df) - sum(df['차이']))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"SpT6mcfwsG8x"},"source":["# 모형 성능 평가 - Confusion Matrix 계산\n","from sklearn import metrics\n","svm_matrix = metrics.confusion_matrix(y_test, y_hat)\n","svm_matrix"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"PAgiGFXasHWV"},"source":["# 모형 성능 평가 - 평가지표 계산\n","svm_report = metrics.classification_report(y_test, y_hat)\n","print(svm_report)"],"execution_count":null,"outputs":[]}]}